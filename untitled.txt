    PolynomialFeatures,
    StandardScaler,
    MinMaxScaler,
    MaxAbsScaler,
    KBinsDiscretizer,
)
from sklearn.svm import LinearSVC


@@ -187,11 +188,7 @@ def create_pipeline(model_name, feature_select, feature_create, num_pipe_feature
            cv_value = int(feature_select[cv_index:].split(',')[0].split('=')[1])
        else:
            cv_value = st.number_input("Enter the number of folds for RFECV", min_value=2, max_value=10, value=2)
    
        if 'LinearSVC' in feature_select:
            class_weight = st.selectbox("Select class weight for LinearSVC", ['balanced', None])
            model = LinearSVC(penalty="l1", dual=False, class_weight=class_weight)
        elif 'LogisticRegression' in feature_select:
        if 'LogisticRegression' in feature_select:
            class_weight = st.selectbox("Select class weight for LogisticRegression", ['balanced', None])
            model = LogisticRegression(class_weight=class_weight)
    

@@ -217,8 +214,10 @@ def create_pipeline(model_name, feature_select, feature_create, num_pipe_feature
        feature_creator = PolynomialFeatures(degree=degree, interaction_only=interaction_only)
    elif feature_create == 'Binning':
        feature_creator = KBinsDiscretizer(n_bins=5, encode='ordinal', strategy='uniform')
    elif feature_create == 'Feature Scaling':
    elif feature_create == 'MinMaxScaler':
        feature_creator = MinMaxScaler()
    elif feature_create == 'MaxAbsScaler':
        feature_creator = MaxAbsScaler()
        
    # I used "Pipeline" not "make_pipeline" bc I wanted to name the steps
    pipe = Pipeline([('columntransformer',preproc_pipe),


@@ -331,11 +330,19 @@ elif st.session_state['current_section'] == 'Custom Model Builder':
    st.write("Mean Score Time:", cv_results['score_time'].mean())
     # why isn't thisprinting in streamlit

<<<<<<< Updated upstream
################################################### Leaderboard ########################################################

elif st.session_state['current_section'] == 'Leaderboard':
    st.title("Leaderboard")
    st.header("Hopefully this isn't too hard because it will probably be the last thing we do")
=======
# Dropdown menu to choose the feature selection method
feature_select_method = st.selectbox("Choose Feature Selection Method:",['passthrough','PCA(5)','PCA(10)','PCA(15)','SelectKBest(f_classif)','SelectFromModel(LassoCV())', 'SelectFromModel(LinearSVC(penalty="l1", dual=False))','RFECV(LogisticRegression, scoring=prof_score)','SequentialFeatureSelector(LogisticRegression, scoring=prof_score)',])

# Dropdown menu to choose the feature creation method
feature_create_method = st.selectbox("Choose Feature Creation Method:", ['passthrough', 'PolynomialFeatures', 'Binning', 'MinMaxScaler', 'MaxAbsScaler',])
>>>>>>> Stashed changes